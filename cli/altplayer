#!/usr/bin/env node
'use strict';

const VERSION   = require('./package.json').version;
const program   = require('commander');
const commands  = require('./util');

program
  .version(VERSION)
  .option('-n, --name [value]', 'The AWS stack name.  Will server as a prefix for resources related to the stack.')
  .option('-e, --environment [value]', 'Environment name (latest, development, production).')
  .option('-j, --jwt-secret [value]', 'Password for JWT.')
  .option('--db-password [value]', 'Password for Wavestash API database.')
  .option('--tracks-bucket [value]', 'Name of S3 bucket for storing tracks.')
  .option('--encoded-tracks-bucket [value]', 'Name of S3 bucket for storing encoded tracks.')
  .option('--apps-bucket [value]', 'Name of S3 bucket for storing deployed apps for ElasticBeanstalk.')
  .option('--api-instance-type [value]', 'Instance type for the API (t1.micro, etc.).')
  .option('--client-instance-type [value]', 'Instance type for the client (t1.micro, etc.).')
  .option('--db-instance-type [value]', 'Instance type for the API database (t1.micro, etc.).')
  .option('--api-cname [value]', 'The ElasticBeanstalk CNAME for the API service.')
  .option('--client-cname [value]', 'The ElasticBeanstalk CNAME for the client.')
  .option('--ssl-api-name [value]', 'The name of the SSL resource to be used for the API.')
  .option('--ssl-client-name [value]', 'The name of the SSL resource to be used for the client.')
  .option('--solution-stack [value]', 'The name of solution stack to use for ElasticBeanstalk.');

program
  .command('create-stack')
    .description('Create a full stack for wavestash.')
    .action(commands.createStack);

program
  .command('destroy-stack')
    .description('Destroy a full stack for wavestash.')
    .action(commands.destroyStack);

program
  .command('describe-stack')
    .description('Describe a stack.')
    .action(commands.describeStack);

program
  .command('generate-template')
    .description('Do a dry-run of stack creation.')
    .action(commands.generateTemplate);

program
  .command('deploy')
    .description('Deploys to a stack.')
    .action(commands.deploy);

process.unhandledRejection = e => {
  console.error(colors.red("UnhandledRejection:"));
  console.error(e);
};

process.uncaughtException = (e) => {
  console.error(colors.red("UncaughtException:"));
  console.error(e);
};

program.parse(process.argv);

if (!program.args.length) {
  program.outputHelp();
  return;
}

